(define make-runtime-support
	(lambda ()
		(string-append
			"JUMP(TstrTableLastExit);\n"
			"TstrTableLast:\n"
			"	MOV(R0,IND(100001));\n"
			"	RETURN;\n"
			"TstrTableLastExit:\n"
			"\n"
			"JUMP(TstrTableFirstExit);\n"
			"TstrTableFirst:\n"
			"	MOV(R0,IND(100000));\n"
			"	RETURN;\n"
			"TstrTableFirstExit:\n"
			"\n"
			"JUMP(TstrTableSetLastExit);\n"
			"TstrTableSetLast:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP);\n"
			"	ADD(IND(100001),FPARG(0));\n"
			"	POP(FP);\n"
			"	RETURN;\n"
			"TstrTableSetLastExit:\n"
			"\n"
			"\n"
			"\n"
			"JUMP (TstrlookupExit);\n"
			"/** receives a string address and returns its address in the string table. */\n"
			"Tstrlookup:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP); \n"
			"	MOV(R15,FPARG(0));\n"
			"	CALL(TstrTableFirst);\n"
			"	MOV(R14,R0); /*str tbl iterator - begin at start*/\n"
			"	CALL(TstrTableLast);\n"
			"	MOV(R13,R0); /* str tbl end */\n"
			"	MOV(R0,0); /* address of undefined */\n"
			"	MOV(R12,IMM(0)); /* string iterator */\n"
			"TstrlookupXLoop:\n"
			"	ADD(R14,R12);\n"
			"	CMP(R14,R13);\n"
			"	JUMP_GT(TstrlookupInsert);\n"
			"	MOV(R12,IMM(0));\n"
			"	TstrlookupInLoop:\n"
			"		MOV(R11,INDD(R14,R12));\n"
			"		MOV(R10,INDD(R15,R12));\n"
			"		INCR(R12);\n"
			"		CMP(R10,R11);\n"
			"		JUMP_NE(TstrlookupXLoop);	\n"
			"		MOV(R10,INDD(R15,1));\n"
			"		ADD(R10,2);\n"
			"		CMP(R12,R10);\n"
			"		JUMP_EQ(TstrlookupClean);\n"
			"		JUMP(TstrlookupInLoop); \n"
			"	\n"
			"TstrlookupInsert:\n"
			"	CALL(TstrTableLast);\n"
			"	MOV(R14,R0); /* first free place of string table */\n"
			"	MOV(R10,INDD(R15,1));\n"
			"	ADD(R10,2);\n"
			"	PUSH(R10);	\n"
			"	CALL(TstrTableSetLast);\n"
			"	DROP(1);\n"
			"	MOV(IND(R14),IND(R15));\n"
			"	MOV(INDD(R14,1),INDD(R15,1));\n"
			"	MOV(R13,INDD(R15,1)); /* string length after T_STRING and n */\n"
			"	MOV(R12,0); /* iterator */\n"
			"TstrlookupCopy:\n"
			"	CMP(R12,R13);\n"
			"	JUMP_GT(TstrlookupClean);\n"
			"	INCR(R12);\n"
			"	MOV(INDD(R14,R12),INDD(R15,R12));\n"
			"	JUMP(TstrlookupCopy); \n"
			"TstrlookupClean:\n"
			"	MOV(R0,R14);\n"
			"	POP(FP);\n"
			"	RETURN;			\n"
			"TstrlookupExit:\n"
			"\n"
			"JUMP(FreeTableLastExit);\n"
			"FreeTableLast:\n"
			"	MOV(R0,IND(200001));\n"
			"	RETURN;\n"
			"FreeTableLastExit:\n"
			"\n"
			"JUMP(FreeTableFirstExit);\n"
			"FreeTableFirst:\n"
			"	MOV(R0,IND(200000));\n"
			"	RETURN;\n"
			"FreeTableFirstExit:\n"
			"\n"
			"JUMP(FreeTableSetLastExit);\n"
			"FreeTableSetLast:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP);\n"
			"	MOV(R0,FPARG(0));\n"
			"	MOV(IND(200001),R0);\n"
			"	DROP(1);\n"
			"	RETURN;\n"
			"FreeTableSetLastExit:\n"
			"\n"
			"/* gets address of symbol, returns address of free table byte*/\n"
			"JUMP (TlookupExit);\n"
			"Tlookup:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP);\n"
			"	CALL(FreeTableFirst);\n"
			"	SUB(R0,2);\n"
			"	MOV(R14,R0); /*pointer to free var table */\n"
			"	MOV(R15, INDD(FPARG(0),1)); /* symbol's string address */\n"
			"	CALL(FreeTableLast);\n"
			"	MOV(R13,R0);\n"
			"	MOV(R0,0); /* address of undefined */\n"
			"TlookupLoop:\n"
			"	CMP(R14,R13);\n"
			"	JUMP_GT(TlookupClean);\n"
			"	ADD(R14,2);\n"
			"	CMP(IND(R14),R15);\n"
			"	JUMP_NE(TlookupLoop);\n"
			"	MOV(R0,R14);\n"
			"TlookupClean:\n"
			"	POP(FP);\n"
			"	RETURN;			\n"
			"TlookupExit:\n"
			"\n"
			"/**** receives a symbol (0) and an address (1) and inserts them into the free table. */\n"
			"JUMP (TfinsertExit);\n"
			"Tfinsert:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP);\n"
			"	PUSH(R15);\n"
			"	CALL(FreeTableLast);\n"
			"	MOV(R12,FPARG(0));\n"
			"	MOV(IND(R0),INDD(R12,1));	\n"
			"	MOV(INDD(R0,1),FPARG(1));\n"
			"	\n"
			"	CALL(FreeTableLast);\n"
			"	MOV(R15,R0);\n"
			"	ADD(R0,2);\n"
			"	PUSH(R0);\n"
			"	CALL(FreeTableSetLast);\n"
			"	DROP(1);\n"
			"TfinsertClean:\n"
			"	MOV(R0,R15);\n"
			"	POP(R15);\n"
			"	POP(FP);\n"
			"	RETURN;			\n"
			"TfinsertExit:\n"
			"\n"
			"\n"
			"/*** define. receives the address of the entry in the free table (arg0) and sets the function to (arg1)**/\n"
			"JUMP (TdefineExit);\n"
			"Tdefine:\n"
			"	PUSH(FP);\n"
			"	MOV(FP,SP);\n"
			"	MOV(R15,FPARG(2));\n"
			"	MOV(INDD(R15,1),FPARG(3));\n"
			"TdefineClean:	\n"
			"	POP(FP);\n"
			"	RETURN;			\n"
			"TdefineExit:\n"
			"\n"
		)
	)
)
